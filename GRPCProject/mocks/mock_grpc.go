// Code generated by MockGen. DO NOT EDIT.
// Source: proto/movie_grpc.pb.go

// Package mock_proto is a generated GoMock package.
package mocks

import (
	proto "GRPCProject/proto"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockMovieServiceClient is a mock of MovieServiceClient interface.
type MockMovieServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMovieServiceClientMockRecorder
}

// MockMovieServiceClientMockRecorder is the mock recorder for MockMovieServiceClient.
type MockMovieServiceClientMockRecorder struct {
	mock *MockMovieServiceClient
}

// NewMockMovieServiceClient creates a new mock instance.
func NewMockMovieServiceClient(ctrl *gomock.Controller) *MockMovieServiceClient {
	mock := &MockMovieServiceClient{ctrl: ctrl}
	mock.recorder = &MockMovieServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieServiceClient) EXPECT() *MockMovieServiceClientMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method.
func (m *MockMovieServiceClient) CreateMovie(ctx context.Context, in *proto.CreateMovieRequest, opts ...grpc.CallOption) (*proto.CreateMovieResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMovie", varargs...)
	ret0, _ := ret[0].(*proto.CreateMovieResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockMovieServiceClientMockRecorder) CreateMovie(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockMovieServiceClient)(nil).CreateMovie), varargs...)
}

// DeleteMovie mocks base method.
func (m *MockMovieServiceClient) DeleteMovie(ctx context.Context, in *proto.DeleteMovieRequest, opts ...grpc.CallOption) (*proto.DeleteMovieResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMovie", varargs...)
	ret0, _ := ret[0].(*proto.DeleteMovieResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockMovieServiceClientMockRecorder) DeleteMovie(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockMovieServiceClient)(nil).DeleteMovie), varargs...)
}

// GetMovie mocks base method.
func (m *MockMovieServiceClient) GetMovie(ctx context.Context, in *proto.ReadMovieRequest, opts ...grpc.CallOption) (*proto.ReadMovieResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMovie", varargs...)
	ret0, _ := ret[0].(*proto.ReadMovieResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockMovieServiceClientMockRecorder) GetMovie(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockMovieServiceClient)(nil).GetMovie), varargs...)
}

// GetMovies mocks base method.
func (m *MockMovieServiceClient) GetMovies(ctx context.Context, in *proto.ReadMoviesRequest, opts ...grpc.CallOption) (*proto.ReadMoviesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMovies", varargs...)
	ret0, _ := ret[0].(*proto.ReadMoviesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovies indicates an expected call of GetMovies.
func (mr *MockMovieServiceClientMockRecorder) GetMovies(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovies", reflect.TypeOf((*MockMovieServiceClient)(nil).GetMovies), varargs...)
}

// UpdateMovie mocks base method.
func (m *MockMovieServiceClient) UpdateMovie(ctx context.Context, in *proto.UpdateMovieRequest, opts ...grpc.CallOption) (*proto.UpdateMovieResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMovie", varargs...)
	ret0, _ := ret[0].(*proto.UpdateMovieResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockMovieServiceClientMockRecorder) UpdateMovie(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockMovieServiceClient)(nil).UpdateMovie), varargs...)
}

// MockMovieServiceServer is a mock of MovieServiceServer interface.
type MockMovieServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMovieServiceServerMockRecorder
}

// MockMovieServiceServerMockRecorder is the mock recorder for MockMovieServiceServer.
type MockMovieServiceServerMockRecorder struct {
	mock *MockMovieServiceServer
}

// NewMockMovieServiceServer creates a new mock instance.
func NewMockMovieServiceServer(ctrl *gomock.Controller) *MockMovieServiceServer {
	mock := &MockMovieServiceServer{ctrl: ctrl}
	mock.recorder = &MockMovieServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieServiceServer) EXPECT() *MockMovieServiceServerMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method.
func (m *MockMovieServiceServer) CreateMovie(arg0 context.Context, arg1 *proto.CreateMovieRequest) (*proto.CreateMovieResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", arg0, arg1)
	ret0, _ := ret[0].(*proto.CreateMovieResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockMovieServiceServerMockRecorder) CreateMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockMovieServiceServer)(nil).CreateMovie), arg0, arg1)
}

// DeleteMovie mocks base method.
func (m *MockMovieServiceServer) DeleteMovie(arg0 context.Context, arg1 *proto.DeleteMovieRequest) (*proto.DeleteMovieResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeleteMovieResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockMovieServiceServerMockRecorder) DeleteMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockMovieServiceServer)(nil).DeleteMovie), arg0, arg1)
}

// GetMovie mocks base method.
func (m *MockMovieServiceServer) GetMovie(arg0 context.Context, arg1 *proto.ReadMovieRequest) (*proto.ReadMovieResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", arg0, arg1)
	ret0, _ := ret[0].(*proto.ReadMovieResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockMovieServiceServerMockRecorder) GetMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockMovieServiceServer)(nil).GetMovie), arg0, arg1)
}

// GetMovies mocks base method.
func (m *MockMovieServiceServer) GetMovies(arg0 context.Context, arg1 *proto.ReadMoviesRequest) (*proto.ReadMoviesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovies", arg0, arg1)
	ret0, _ := ret[0].(*proto.ReadMoviesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovies indicates an expected call of GetMovies.
func (mr *MockMovieServiceServerMockRecorder) GetMovies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovies", reflect.TypeOf((*MockMovieServiceServer)(nil).GetMovies), arg0, arg1)
}

// UpdateMovie mocks base method.
func (m *MockMovieServiceServer) UpdateMovie(arg0 context.Context, arg1 *proto.UpdateMovieRequest) (*proto.UpdateMovieResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", arg0, arg1)
	ret0, _ := ret[0].(*proto.UpdateMovieResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockMovieServiceServerMockRecorder) UpdateMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockMovieServiceServer)(nil).UpdateMovie), arg0, arg1)
}

// mustEmbedUnimplementedMovieServiceServer mocks base method.
func (m *MockMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMovieServiceServer")
}

// mustEmbedUnimplementedMovieServiceServer indicates an expected call of mustEmbedUnimplementedMovieServiceServer.
func (mr *MockMovieServiceServerMockRecorder) mustEmbedUnimplementedMovieServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMovieServiceServer", reflect.TypeOf((*MockMovieServiceServer)(nil).mustEmbedUnimplementedMovieServiceServer))
}

// MockUnsafeMovieServiceServer is a mock of UnsafeMovieServiceServer interface.
type MockUnsafeMovieServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMovieServiceServerMockRecorder
}

// MockUnsafeMovieServiceServerMockRecorder is the mock recorder for MockUnsafeMovieServiceServer.
type MockUnsafeMovieServiceServerMockRecorder struct {
	mock *MockUnsafeMovieServiceServer
}

// NewMockUnsafeMovieServiceServer creates a new mock instance.
func NewMockUnsafeMovieServiceServer(ctrl *gomock.Controller) *MockUnsafeMovieServiceServer {
	mock := &MockUnsafeMovieServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMovieServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMovieServiceServer) EXPECT() *MockUnsafeMovieServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMovieServiceServer mocks base method.
func (m *MockUnsafeMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMovieServiceServer")
}

// mustEmbedUnimplementedMovieServiceServer indicates an expected call of mustEmbedUnimplementedMovieServiceServer.
func (mr *MockUnsafeMovieServiceServerMockRecorder) mustEmbedUnimplementedMovieServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMovieServiceServer", reflect.TypeOf((*MockUnsafeMovieServiceServer)(nil).mustEmbedUnimplementedMovieServiceServer))
}
